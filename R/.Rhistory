genelist <- sapply(genelist, as.character)
genelist <- as.character(unname(genelist, force = TRUE))
genelist<- as.character(genelist)
yy = enrichPathway(genelist, pvalueCutoff=0.1,organism="human",readable=TRUE)
head(yy)
tempcrap <- count_articles(Dproteins)
tempcrap
rm(tempcrap)
count_articles <- function (CVDP){
for (i in 1:length(CVDP)){
print(CVDP[i])
pname <- paste(CVDP[i],'[GENE]) AND (Homo sapiens[ORGN])',sep="")
ids<-entrez_search(db="pubmed", term=pname,retmax=80000)
atemp <- cbind(CVDP[i],length(ids$ids))
if(i!=1){
articles <- rbind(articles,atemp)}
else{
articles <- atemp}
}
return(articles)
}
tempcount <- count_articles(Dproteins)
tempcount
count_articles <- function (CVDP){
for (i in 1:length(CVDP)){
print(CVDP[i])
pname <- paste(CVDP[i],'[GENE]) AND (Homo sapiens[ORGN])',sep="")
ids<-entrez_search(db="pubmed", term=pname,retmax=100000)
atemp <- cbind(CVDP[i],length(ids$ids))
if(i!=1){
articles <- rbind(articles,atemp)}
else{
articles <- atemp}
}
return(articles)
}
tempcount <- count_articles(Dproteins)
count_articles <- function (CVDP){
for (i in 1:length(CVDP)){
print(CVDP[i])
pname <- paste(CVDP[i],'[GENE]) AND (Homo sapiens[ORGN])',sep="")
ids<-entrez_search(db="pubmed", term=pname,retmax=90000)
atemp <- cbind(CVDP[i],length(ids$ids))
if(i!=1){
articles <- rbind(articles,atemp)}
else{
articles <- atemp}
}
return(articles)
}
tempcount <- count_articles(Dproteins)
tempcount
source("http://bioconductor.org/biocLite.R")
biocLite("NCBI2R")
library(NCBI2R)
version
install.packages("C:/Temp/NCBI2R-master/NCBI2R-master.zip", repos = NULL, type = "win.binary")
library(NCBI2R)
install.packages("C:/Temp/NCBI2R_1.4.7.tar.gz", repos = NULL, type = "source")
library(NCBI2R)
tempinteractions <- get_interactions(Dproteins)
tempinteractions
tempintcount <- count_interactions(Dproteins)
tempintcount
temparticlecount <- count_articles(Dproteins) # how many articles written about these proteins?
tempinteractions <- get_interactions(Dproteins)
tempintcount <- count_interactions(Dproteins)
tempintcount
temparticlecount
tempcrap <- get.ppiNCBI(Dproteins)
nrow(mygenes)
middle <- function(mydata) {
len <- nrow(mydata)
startpoint <- round(len[1]/2)
endpoint <- startpoint+6
mydata[startpoint:endpoint,]
}
middle(mygenes)
middle(mappings)
middle(disgene)
middle(digestive)
middle <- function(mydata) {
len <- nrow(mydata)
startpoint <- round(len/2)
endpoint <- startpoint+6
mydata[startpoint:endpoint,]
}
middle(digestive)
middle <- function(mydata) {
len <- nrow(mydata)
startpoint <- round(len/2)
endpoint <- startpoint+5
mydata[startpoint:endpoint,]
}
middle(digestive)
save.image("C:/R-files/disease/GI-disease-Oct21st2017.RData")
library(foreign)
library(MASS)
library(ggplot2)
library(foreign)
library(MASS)
library(ggplot2)
dat <- read.dta("http://www.karlin.mff.cuni.cz/~pesta/prednasky/NMFM404/Data/nb_data.dta")
dat <- within(dat, {
prog <- factor(prog, levels = 1:3, labels = c("General", "Academic", "Vocational"))
id <- factor(id)
})
summary(dat)
head(dat)
ggplot(dat, aes(daysabs, fill = prog)) + geom_histogram(binwidth = 1)
+ facet_grid(prog ~ ., margins = TRUE, scales = "free")
ggplot(dat, aes(daysabs, fill = prog)) + geom_histogram(binwidth = 1)+ facet_grid(prog ~ ., margins = TRUE, scales = "free")
with(dat, tapply(daysabs, prog, function(x) {
sprintf("M (SD) = %1.2f (%1.2f)", mean(x), sd(x))
}))
summary(m1 <- glm.nb(daysabs ~ math + prog, data = dat))
m2 <- update(m1, . ~ . - prog)
anova(m1, m2)
m3 <- glm(daysabs ~ math + prog, family = "poisson", data = dat)
pchisq(2 * (logLik(m1) - logLik(m3)), df = 1, lower.tail = FALSE)
(est <- cbind(Estimate = coef(m1), confint(m1)))
exp(est)
newdata1 <- data.frame(math = mean(dat$math), prog = factor(1:3, levels = 1:3,
labels = levels(dat$prog)))
newdata1$phat <- predict(m1, newdata1, type = "response")
newdata1
newdata2 <- cbind(newdata2, predict(m1, newdata2, type = "link", se.fit=TRUE))
newdata2 <- within(newdata2, {
DaysAbsent <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
newdata2 <- data.frame(
math = rep(seq(from = min(dat$math), to = max(dat$math), length.out = 100), 3),
prog = factor(rep(1:3, each = 100), levels = 1:3, labels =
levels(dat$prog)))
newdata2 <- cbind(newdata2, predict(m1, newdata2, type = "link", se.fit=TRUE))
newdata2 <- within(newdata2, {
DaysAbsent <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
ggplot(newdata2, aes(math, DaysAbsent)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = prog), alpha = .25) +
geom_line(aes(colour = prog), size = 2) +
labs(x = "Math Score", y = "Predicted Days Absent")
m3 <- glm(daysabs ~ math + prog, family = "poisson", data = dat)
pchisq(2 * (logLik(m1) - logLik(m3)), df = 1, lower.tail = FALSE)
m3
(est <- cbind(Estimate = coef(m1), confint(m1)))
exp(est)
save.image("C:/R-files/statistics/negbinomialreg.RData")
m1
?within
tail(dat)
head(newdata1)
head(newdata2)
install.packages("paxtoolsr")
source("http://bioconductor.org/biocLite.R")
biocLite("paxtoolsr")
library(paxtoolsr)
searchResults <- searchPc(q = "glycolysis", type = "pathway")
searchResults
head(searchResults)
xpathSApply(searchResults, "/searchResponse/searchHit/name", xmlValue)[1]
xpathSApply(searchResults, "/searchResponse/searchHit/name", xmlValue)[2]
xpathSApply(searchResults, "/searchResponse/searchHit/name", xmlValue)[3]
library(factoextra)
library(NbClust)
library(factoextra)
library(NbClust)
kruskal.test(y~A)
memory.limit(2210241024*1024) # use more RAM memory (22 GBs)
setwd("C:/R-files/complexnetworks")    # point to where my code lives
load("complexnets_8thFebruary2018.RData")
source("complex_networks_functions.R")  # load in the functions required for this work.
library(ROCR)
library(kernlab)
library("e1071")
library(caret)
library(data.table)
library(ROCR)
library(kernlab)
library("e1071")
library(caret)
library(data.table)
positives
?ranger
rf_fit <- train(as.factor(ytrain) ~., data=xtrain, method = "ranger")
#targettype <- predict(rf_fit,t(xtrain))
mmi
xtrain
class(xtrain)
class(mmi)
t(xtrain)
dim(xtrain)
dim(ytrain)
length(ytrain)
rf_fit <- train(as.factor(ytrain) ~., data=t(xtrain), method = "ranger")
rf_fit <- train(as.factor(ytrain) ~., data=xtrain[,1:149], method = "ranger")
data("iris")
rf_fit <- ranger(Species ~ ., data = iris)
library(ranger)
rf_fit <- train(as.factor(ytrain) ~., data=xtrain[,1:149], method = "ranger")
rf_fit <- train(as.factor(ytrain) ~., data=t(xtrain[,1:149]), method = "ranger")
rf_fit <- train(as.factor(ytrain) ~., data=xtrain, method = "ranger")
mmi <- mmt[,1:1000]
mmi <- data.frame(mmi)
mtest <- mmt[,1001:2000]
mtest <- data.frame(mtest)
targets <- (mmi[150,]); targets <- t(targets); rownames(targets) <- NULL; colnames(targets) <- NULL
targets <- as.factor(targets)
testtargets <- mtest[150,];testtargets <- t(testtargets);rownames(testtargets) <- NULL; colnames(testtargets) <- NULL
testtargets <- as.factor(testtargets)
rf_fit <- train(as.factor(targets) ~., data = t(mmi),method = "ranger")
summary(rf_fit)
rf_fit
dim(mmi)
rf_fit <- train(as.factor(targets) ~., data = t(mmi[1:149,]),method = "ranger")
rf_fit <- train(as.factor(targets) ~., data = t(mmi[,1:149]),method = "ranger")
rf_fit
rf_fit <- train(as.factor(ytrain) ~., data=t(xtrain[1:149,]), method = "ranger")
mmi
t(mmi)
xtrain
mmi
t(xtrain)
t(mmi)
str(mmi)
str(xtrain)
str(t(xtrain))
class(xtrain)
class(mmi)
t(mmi)
(mmi)
data("iris")
ranger(Species ~ ., data = iris)
rf_fit <- ranger(Species ~ ., data = iris)
rf_fit
train.idx <- sample(nrow(iris), 2/3 * nrow(iris))
iris.train <- iris[train.idx, ]
iris.test <- iris[-train.idx, ]
rg.iris <- ranger(Species ~ ., data = iris.train)
pred.iris <- predict(rg.iris, data = iris.test)
table(iris.test$Species, pred.iris$predictions)
iris.test
str(iris.test)
str(iris.train)
dim(iris.test)
dim(iris.train)
dim(xtest)
rm(shite)
dim(xtest)
dim(iris.train)
dim(iris.test)
str(iris.train)
str(iris.test)
str(xtrain)
names(xtrain)
targets
rm(targets)
rf_fit <- train(as.factor(targets) ~., data=xtrain, method = "ranger")
rf_fit
targettype <- predict(rf_fit,xtrain)
pred <- prediction(targettype,xtrain$targets)
targettype
xtrain$targets
for (i in 1:length(targettype)){
if(targettype[i] == 1) {
targettype[i] <- runif(1, 7.0, 9.9)}}
for (i in 1:length(targettype)){
if(targettype[i] == 0) {
targettype[i] <- runif(1,0.01,0.02)}}
targettype
targettype <- predict(rf_fit,xtrain)
pred <- prediction(targettype,xtrain$targets)
targettype
targettype <- as.numeric(targettype)
targettype
for (i in 1:length(targettype)){
if(targettype[i] == 1) {
targettype[i] <- 0}}
for (i in 1:length(targettype)){
if(targettype[i] == 2) {
targettype[i] <- 1}}
targettype
for (i in 1:length(targettype)){
if(targettype[i] == 1) {
targettype[i] <- runif(1, 7.0, 9.9)}}
for (i in 1:length(targettype)){
if(targettype[i] == 0) {
targettype[i] <- runif(1,0.01,0.02)}}
targettype
pred <- prediction(targettype,xtrain$targets)
roc1.perf <- performance(pred, "tpr", "fpr")
plot(roc1.perf)
pred.test <- predict(rf_fit, data = xtest)
table(xtest$targets, pred.test.xtest$predictions)
xtest$predictions
table(xtest$targets, pred.test)
roc2.perf <- performance(pred.test, "tpr", "fpr")
pred.test <- predict(rf_fit, data = xtest)
table(xtest$targets, pred.test)
roc2.perf <- performance(pred.test, "tpr", "fpr")
xtest$targets
dim(xtest)
dim(xtrain)
2309+577
pred.test <- predict(rf_fit,xtest)
pred.test
roc2.perf <- performance(pred.test, "tpr", "fpr")
roc1.perf
pred.test
factor2int <- function(targettype){
targettype <- as.numeric(targettype)
for (i in 1:length(targettype)){
if(targettype[i] == 1) {
targettype[i] <- 0}}
for (i in 1:length(targettype)){
if(targettype[i] == 2) {
targettype[i] <- 1}}
for (i in 1:length(targettype)){
if(targettype[i] == 1) {
targettype[i] <- runif(1, 7.0, 9.9)}}
for (i in 1:length(targettype)){
if(targettype[i] == 0) {
targettype[i] <- runif(1,0.01,0.02)}}
return(targettype)
}
pred.test <- factor2int(pred.test)
pred.test
roc2.perf <- performance(pred.test, "tpr", "fpr")
targettype
targettype <- predict(rf_fit,xtrain)
targettype
pred <- prediction(targettype,xtrain$targets)
targettype <- as.numeric(targettype)
for (i in 1:length(targettype)){
if(targettype[i] == 1) {
targettype[i] <- 0}}
for (i in 1:length(targettype)){
if(targettype[i] == 2) {
targettype[i] <- 1}}
for (i in 1:length(targettype)){
if(targettype[i] == 1) {
targettype[i] <- runif(1, 7.0, 9.9)}}
for (i in 1:length(targettype)){
if(targettype[i] == 0) {
targettype[i] <- runif(1,0.01,0.02)}}
targettype
str(targettype)
pred <- prediction(targettype,xtrain$targets)
roc1.perf <- performance(pred, "tpr", "fpr")
plot(roc1.perf)
pred <- prediction(targettype,xtrain$targets)
pred.test <- predict(rf_fit,xtest)
pred.test <- factor2int(pred.test)
str(pred.test)
roc2.perf <- performance(pred.test, "tpr", "fpr")
targettype
targettype <-predict(rf_fit,xtest)
pred.test <- factor2int(targettype)
targettype <- predict(rf_fit,xtest)
targettype <- factor2int(targettype)
pred       <- prediction(targettype,xtest$targets)
roc2.perf  <- performance(pred, "tpr", "fpr")
plot(roc2.perf)
table(xtest$targets, pred.test)
pred
table(xtest$targets, pred)
targettype
roc2.perf
pred
perf <- performance(pred, measure = "auc")
print("AUC: ", perf@y.values)
perf <- performance(pred, measure = "auc")
perf
perf@y.values
cat("\nAUC: ", perf@y.values)
auc <- perf@y.values
cat("\nAUC: ", auc)
auc
cat("\nAUC: ", [auc])
cat("\nAUC: ", auc[1])
auc <- as.numeric(perf@y.values)
cat("\nAUC: ", auc)
cat("\nAUC: ", as.numeric(perf@y.values))
save.image("C:/R-files/complexnetworks/ComplexNets_9thFebruary2018.RData")
perf
perf <- performance(pred, measure = "accuracy")
perf <- performance(pred, measure = "acc")
cat("\nAUC: ", as.numeric(perf@y.values))
perf
max(perf@y.values[[1]])
perf <- performance(pred, measure = "auc")
cat("\nAUC: ", as.numeric(perf@y.values))
perf <- performance(pred, measure = "acc")
cat("\nAUC: ", as.numeric(perf@y.values))
cat("\nAUC: ",max(perf@y.values[[1]]) )
perf <- performance(pred, measure = "acc")
cat("\nAccuracy: ",max(perf@x.values[[1]]) )
max(perf.acc at y.values[[1]])
max(perf.acc@y.values[[1]])
plot(perf)
cutoff <- slot(acc.perf, "x.values")[[1]][ind]
cutoff <- slot(perf, "x.values")[[1]][ind]
ind = which.max( slot(perf, "y.values")[[1]] )
acc = slot(perf, "y.values")[[1]][ind]
cutoff = slot(perf, "x.values")[[1]][ind]
print(c(accuracy= acc, cutoff = cutoff))
ind
ind = which.max( slot(perf, "x.values")[[1]] )
acc = slot(perf, "y.values")[[1]][ind]
cutoff = slot(perf, "x.values")[[1]][ind]
print(c(accuracy= acc, cutoff = cutoff))
perf <- performance(pred, measure = "acc")
cat("\nAccuracy: ",max(perf@x.values[[1]]) )
ind = which.max( slot(perf, "x.values")[[1]] )
acc = slot(perf, "y.values")[[1]][ind]
cutoff = slot(perf, "x.values")[[1]][ind]
print(c(accuracy= acc, cutoff = cutoff))
cutoff
ind
ind = which.max( slot(perf, "x.values")[[1]] )
acc = slot(perf, "y.values")[[1]][ind]
cutoff = slot(perf, "x.values")[[1]][ind]
print(c(accuracy= acc, cutoff = cutoff))
ind = which.max( slot(perf, "x.values")[[2]] )
acc = slot(perf, "y.values")[[2]][ind]
cutoff = slot(perf, "x.values")[[2]][ind]
print(c(accuracy= acc, cutoff = cutoff))
perf
ind = which.max( slot(perf, "x.values")[[1]] )
acc = slot(perf, "y.values")[[1]][ind]
cutoff = slot(perf, "x.values")[[1]][ind]
print(c(accuracy= acc, cutoff = cutoff))
cat("\nAccuracy: ",max(perf@x.values[[1]]) )
plot(perf)
rf_fit$variable.importance
rf_fit <- train(as.factor(targets) ~., data=xtrain, method = "ranger",importance = "impurity")
rf_fit$variable.importance
rf_fit
targettype <- predict(rf_fit,xtrain)
pred       <- prediction(targettype,xtrain$targets)
roc1.perf  <- performance(pred, "tpr", "fpr")
plot(roc1.perf)
targettype <- factor2int((targettype))
pred       <- prediction(targettype,xtrain$targets)
roc1.perf  <- performance(pred, "tpr", "fpr")
plot(roc1.perf)
targettype <- predict(rf_fit,xtest)
targettype <- factor2int(targettype)
pred       <- prediction(targettype,xtest$targets)
roc2.perf  <- performance(pred, "tpr", "fpr")
plot(roc2.perf)
table(xtest$targets, pred)
perf <- performance(pred, measure = "auc")
cat("\nAUC: ", as.numeric(perf@y.values))
perf <- performance(pred, measure = "acc")
cat("\nAccuracy: ",max(perf@x.values[[1]]) )
ind = which.max(slot(perf,"x.values")[[1]] )
acc = slot(perf, "y.values")[[1]][ind]
cutoff = slot(perf, "x.values")[[1]][ind]
print(c(accuracy= acc, cutoff = cutoff))
xtest$targets
pred
targettype <- predict(rf_fit,xtest)
targettype <- factor2int(targettype)
pred       <- prediction(targettype,xtest$targets)
pred
xtest$targets
pred
targettype
table(xtest$targets, targettype)
xtest$targets
targettype
targettype <- predict(rf_fit,xtest)
table(xtest$targets, targettype)
(248+211)/(248+211+54+64)
acc <-table(xtest$targets, targettype)
acc
str(acc)
as.vector(acc)
acc[1]
acc <- as.vector(acc); TN <- acc[1]; FN <- acc[2]; FP <- acc[3]; TP <- acc[4]
cat("\naccuracy is ",(TP + TN)/(TP + TN + FP + FN))
acc <- table(xtest$targets, targettype)
acc <- as.vector(acc); TN <- acc[1]; FN <- acc[2]; FP <- acc[3]; TP <- acc[4]
cat("\naccuracy calculated by (TP + TN)/(TP + TN + FP + FN) is ",(TP + TN)/(TP + TN + FP + FN))
acc <- as.vector(acc); TN <- acc[1]; FN <- acc[2]; FP <- acc[3]; TP <- acc[4]
cat("\naccuracy calculated by (TP + TN)/(TP + TN + FP + FN) = ",(TP + TN)/(TP + TN + FP + FN))
table(xtest$targets, targettype)
acc <- table(xtest$targets, targettype)
acc <- as.vector(acc); TN <- acc[1]; FN <- acc[2]; FP <- acc[3]; TP <- acc[4]
cat("\naccuracy calculated by (TP + TN)/(TP + TN + FP + FN) = ",(TP + TN)/(TP + TN + FP + FN))
acc <- table(xtest$targets, targettype)
names(acc)
rf_fit <- train(as.factor(targets) ~., data=xtrain, method = "ranger",importance = "impurity")
targettype <- predict(rf_fit,xtrain)
targettype <- factor2int((targettype))
pred       <- prediction(targettype,xtrain$targets)
roc1.perf  <- performance(pred, "tpr", "fpr")
plot(roc1.perf)
targettype <- predict(rf_fit,xtest)
acc <- table(xtest$targets, targettype)
acc <- as.vector(acc); TN <- acc[1]; FN <- acc[2]; FP <- acc[3]; TP <- acc[4]
cat("\naccuracy calculated by (TP + TN)/(TP + TN + FP + FN) = ",(TP + TN)/(TP + TN + FP + FN))
targettype <- factor2int(targettype)
pred       <- prediction(targettype,xtest$targets)
roc2.perf  <- performance(pred, "tpr", "fpr")
plot(roc2.perf)
save.image("C:/R-files/complexnetworks/ComplexNets_9thFebruary2018.RData")
